*myhelp.txt*  For Vim version 7.3     Last change: 2011 oct 27
水木社区 → 电脑技术 → VI编辑器:
http://www.newsmth.net/bbsdoc.php?board=VIM
1.基础
	1.1 |myhelp-基本操作|
	1.2 |myhelp-代码折叠|
	1.3 |myhelp-分割窗口|
	1.4 |myhelp-切换窗口|
	1.5 |myhelp-匹配|
	1.6 |myhelp-myMark|
	1.7 |myhelp-宏|
	1.8 |myhelp-vimtweak|
	1.9 |myhelp-buffer切换|
	2.0 |myhelp-文本加密|
	2.1 |myhelp-modifiable|
	2.2 |myhelp-map|
2.插件--------------------------|myhelp-myplugin|
	ctags-----------------------|myhelp-ctags|
	taglist---------------------|myhelp-taglist|
	winmanager------------------|myhelp-窗口|
	NERD_commenter--------------|myhelp-注释|
	bufexplorer-----------------|myhelp-缓冲区|
	nerd_tree-------------------|myhelp-目录树|	
	fencview--------------------|myhelp-编码|
	txtbrowser------------------|myhelp-阅读|
	Calendar--------------------|myhelp-日历|
	drawit----------------------|myhelp-画图|
	sketch----------------------|myhelp-鼠标画图|
	mru-------------------------|myhelp-打开历史文件|

*myhelp-基本操作*
一般模式： 移动光标的方法 
h 或 向左方向键(←)  光标向左移动一个字符 
j 或 向下方向键(↓)  光标向下移动一个字符 
k 或 向上方向键(↑)  光标向上移动一个字符 
l 或 向右方向键(→)  光标向右移动一个字符 
如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键， 亦即
加上想要进行的次数(数字)后，按下动作即可！ 
[Ctrl] + [f]  屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) 
[Ctrl] + [b]  屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) 
[Ctrl] + [d]  屏幕『向下』移动半页 
[Ctrl] + [u]       屏幕『向上』移动半页  
[Ctrl] + [u]  屏幕『向上』移动半页 
+  光标移动到非空格符的下一列 
-  光标移动到非空格符的上一列 
n<space> 
那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标
会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面
移动 20 个字符距离。 
0  这是数字『 0 』：移动到这一行的最前面字符处 (常用) 
$  移动到这一行的最后面字符处(常用) 
H  光标移动到这个屏幕的最上方那一行 
M  光标移动到这个屏幕的中央那一行 
L  光标移动到这个屏幕的最下方那一行 
G  移动到这个档案的最后一行(常用) 
nG 
n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个
档案的第 20 行(可配合 :set nu) 
gg  移动到这个档案的第一行，相当于 1G 啊！ (常用) 
n<Enter>  n 为数字。光标向下移动 n 行(常用) 
一般模式： 搜寻与取代 
/word 
向光标之下寻找一个字符串名称为 word 的字符串。例如要在档案
内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) 
?word  向光标之上寻找一个字符串名称为 word 的字符串。 
n 
这个 n 是英文按键。代表『重复前一个搜寻的动作』的意思。举
例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符
串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。
如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 
vbird 的字符串！ 
N 
这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻
动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 
:n1,n2s/word1/word2/g 
n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符
串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行
之间搜寻 vbird 并取代为 VBIRD 则： 
『:100,200s/vbird/VBIRD/g』。(常用) 
:1,$s/word1/word2/g 
从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 
word2 ！(常用) 
:1,$s/word1/word2/gc 
从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 
word2 ！且在取代前显示提示字符给使用者确认 (conform) 是否
需要取代！(常用) 
一般模式： 删除、复制与贴上 
x, X 
在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 
为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) 
nx 
n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 
个字符， 『10x』。 
dd  删除游标所在的那一整列(常用) 
ndd 
n 为数字。删除光标所在的向下 n 列，例如 20dd 则是删除 20 列 
(常用) 
d1G  删除光标所在到第一行的所有数据 
dG  删除光标所在到最后一行的所有数据 
d$  删除游标所在处，到该行的最后一个字符 
d0  那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 
yy  复制游标所在的那一行(常用) 
nyy 
n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列
(常用) 
y1G  复制光标所在列到第一列的所有数据 
yG  复制光标所在列到最后一列的所有数据 
y0  复制光标所在的那个字符到该行行首的所有数据 
y$  复制光标所在的那个字符到该行行尾的所有数据 
p, P 
p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 
举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则
按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 
行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变
成 30 行。 (常用) 
J  将光标所在列与下一列的数据结合成同一列 
c  重复删除多个数据，例如向下删除 10 行，[ 10cj ] 
u  复原前一个动作。(常用) 
[Ctrl]+r  重做上一个动作。(常用) 
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，
您的编辑，嘿嘿！很快乐的啦！ 
. 
不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果
您想要重复删除、重复贴上等等动作，按下小数点『.』就好了！  (常
用) 
进入编辑模式 
i, I  插入：在目前的光标所在处插入输入之文字，已存在的文字会向后
退； 其中， i 为『从目前光标所在处插入』， I 为『在目前所
在行的第一个非空格符处开始插入』。 (常用) 
a, A 
a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光
标所在行的最后一个字符处开始插入』。(常用) 
o, O 
这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插
入新的一行』；  O 为在目前光标所在处的上一行插入新的一行！ (常
用) 
r, R 
取代：r 会取代光标所在的那一个字符；R会一直取代光标所在的
文字，直到按下 ESC 为止；(常用) 
上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称
就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要
在左下角处看到 INSERT/REPLACE 才能输入喔！ 
Esc  退出编辑模式，回到一般模式中(常用) 
指令列命令模式 
:w  将编辑的数据写入硬盘档案中(常用) 
:w! 
若档案属性为『只读』时，强制写入该档案。不过，到底能不能写
入， 还是跟您对该档案的档案权限有关啊！ 
:q  离开 vi (常用) 
:q!  若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 
意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ 
:wq  储存后离开，若为 :wq! 则为强制储存后离开 (常用) 
:e!  将档案还原到最原始的状态！ 
ZZ 
若档案没有更动，则不储存离开，若档案已经经过更动，则储存后
离开！ 
:w [filename]  将编辑的数据储存成另一个档案（类似另存新档） 
:r [filename] 
在编辑的数据中，读入另一个档案的数据。亦即将  『filename』  这
个档案内容加到游标所在行后面 
:n1,n2 w [filename]  将 n1 到 n2 的内容储存成 filename 这个档案。 
:! command 
暂时离开 vi 到指令列模式下执行 command 的显示结果！例如 
『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档
案信息！ 
 
           

*myhelp-代码折叠*
-----------------------------------------------
set foldmethod=syntax " 用语法高亮来定义折叠
set foldmethod=indent " 更多的缩进表示更高级别的折叠(这个似乎效果好一些)

zo 打开折叠，也可以用方向键(左右键)打开折叠
zc 关闭折叠(只要在被折叠的块中的任一个语句就行)
zC 对所在范围内所有嵌套的折叠点进行折叠
zO 对所在范围内所有嵌套的折叠点展开

    当使用marker方式时，需要用标计来标识代码的折叠，系统默认是{{{和}}}，最好不要改动之。可以使用下面的命令来创建和删除折叠：

zf   创建折叠，比如在marker方式下：
     zf56G，创建从当前行起到56行的代码折叠；
     10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
     10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
     在括号处zf%，创建从当前行起到对应的匹配的括号上去（()，{}，[]，<>等）。

zd   删除(delete)在光标下的折叠。仅当'foldmethod'设为"manual"或"marker"时有效。
     : set foldmethod (查看当前foldmethod设置，vim默认设置为manual)。
zD   循环删除(Delete)光标下的折叠，即嵌套删除折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。
zE   除去(Eliminate)窗口里"所有"的折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。
*myhelp-窗口命令*
分割窗口
 :split another-file  水平   :spl
 :vsplit another-file  垂直   :vs

窗口调整	
   Ctrl-W +    扩大窗口(多个窗口整体扩大)
   Ctrl-W -    缩小窗口(多个窗口整体缩小)
   :res(ize) +N 把当前窗口高度增加N个像素
   :res(ize) -N 把当前窗口高度减少N个像素
   :vertical res(ize) +N 把当前窗口宽度增加N个像素
   :vertical res(ize) -N 把当前窗口宽度减少N个像素


切换窗口
-----------------------------------------------
用<C-W><C-W>切换当前窗口
当同时打开几个文件时，按<C-W>_使当前窗口最大化

<C-W> = ctrl+w
   Ctrl-W h    移动到窗口左边
   Ctrl-W j    移动到窗口下边
   Ctrl-W k    移动到窗口上边
   Ctrl-W l    移动到窗口右边

*myhelp-匹配*

[+I显示文件中包含光标下<word>的所有行。我常用来浏览某个id在程序中的引用情况。[+I (大写I)


dfx   表示删除到下一个出现x的地方，x可以使任意字符。

%  
--------------------------------
%用来匹配块
如果你的光标在类似([{}])或者#ifdef #else #endif上，输入%将把光标跳转到相应的匹配符号上去。

%还可以用来指定命令范围，如果你想把一个
{
    ...
}
的块全部删除。
可以先把光标移到{再敲d%

如果你想把一个块(包括{})全部往里缩进一个tab
可以把光标移到{敲>%

可以把光标移到{敲=%就是缩进一个块

*myhelp-myMark*
http://mooninsky.net/vim-use-the-mark-and-jump-on-how-to-read-the-novel-txt
实际上是要用VIM的mark功能，简单的说就是m指令。

在一般模式下用m来在当前位置做一个标签。例如，看到某处，只需要按’ma’那么就相当于你做了一个名字为’a'的标记，而所有的字母，数字都能拿来用作标记名称；
然后使用’来跳转到名字为x的书签。例如，’a就是跳到刚刚做好的名字为’a'的书签所在行行首，如果用`a(其中`是键盘左上角，1左边的符号)，那么就是跳转到书签所在的确切位置；
如果使用小写符号来做标记名，那么其作用范围仅仅在当前所在文件，就是说不同文件可以使用相同的名字，但是大写的符号则是全局可见，就是说是唯一的，在任何时候，当你使用大写
字母来跳转，都会自动打开该文件并且跳转到书签位置。比如，在文件1中使用mA标记了一个位置，然后关闭文件，打开另外一个文件2，这时你用’A，那么文件1会被重新打开，并且跳转
到该书签，这是文件2则在buffer当中了——如果没有保存文件2，会看到vim的警告；
还有一些特殊的跳转，例如”是回到跳转前的上一次位置，’.是回到上次改动的位置，这些在编辑代码之类的情况下很好用。

高亮的书签 -- 插件: VisualMark

下载地址	http://www.vim.org/scripts/script.php?script_id=1026

下面介绍它的用法:
vim也和其他编辑器一样有"书签"概念, 在vim中叫"Mark", 可以用下面的命令查看相关说明:
:help Mark 该"书签"有个很很大的缺点: 不可见.
我下面要介绍的Visual Mark插件跟vim中的"Mark"没有什么关系, 并不是使其可见, 而是自己本身就是"可见的书签", 接着往下看就明白了, 用作者的话说就是"类似UltraEdit中的书签".
按照上面的方法安装好Visual Mark后, 你什么也不用设置, 如果是gvim, 直接在代码上按下Ctrl+F2, 如果是vim, 用"mm", 怎么样, 发现光标所在的行变高亮了吧.

如果你设置了多个书签, 你可以用F2键正向在期间切换, 用Shift+F2反向在期间切换.

如果你嫌书签的颜色不好看, 你还可以自己定义, 不过是修改这个插件脚本的的源码, 在目录~/.vim/plugin/中找到并打开visualmark.vim, 找到下面这段代码:
if &bg == "dark"  // 根据你的背景色风格来设置不同的书签颜色
 highlight SignColor ctermfg=white ctermbg=blue guifg=wheat guibg=peru
else             // 主要就是修改guibg的值来设置书签的颜色
 highlight SignColor ctermbg=white ctermfg=blue guibg=grey guifg=RoyalBlue3
endif

Bookmarking，通过F3设置/取消书签，并在书签所在行左侧标识。

插件介绍：
Add a book marking feature to Vim that allows lines of interest to be marked. While similar to marks, you don’t need to assign a bookmark to a mark key, instead an infinite number of bookmarks can be created and then jumped through in sequential order (by line number) with no strain on your memory. This is great to use when you are browsing through some source code for the first time and need to mark out places of interest to learn how it works.
使用方法：
* / :ToggleBookmark – 当前位置设置书签。
* / :PreviousBookmark – 跳转到当前文件中离当前行最近的上一个书签位置。
* / :NextBookmark – 跳转到当前文件中离当前行最近的下一个书签位置。
下载地址：
http://www.vim.org/scripts/script.php?script_id=3022
VIMbookmarking, vim, 书签
http://www.exzdev.com/2010/06/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BEvim%E4%B9%A6%E7%AD%BE%E6%8F%92%E4%BB%B6bookmarking/

*myhelp-宏*
使用宏命令可以重复执行你所记录下的命令。
命令模式下按
q+<register>+一系列命令+q
<register> 指用户自己定义的a-z中的一个寄存器
q+<register> 开始记录命令
q 完成记录，退出记录
例： qaddq
这个宏只记录了一个dd命令到寄存器a中，执行这个宏可以用命令：
@a 
也可以加上执行次数：
10@a 执行10次
当你执行过一次@a之后，你可以用@@来重复执行@a


当你发现存在某个寄存器的命令宏是错误的，你除了可以重新写一遍命令宏之外，还有如下修改方式：先用G（大写）到文件末尾，然后用o（小写）新加一行，不要编辑，用ESC退出到普
通模式，再使用命令"ap会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑这一行，编辑结束后用0（零）回到行首，然后用"ay$将正确内容写到寄存器a中，最后删除这一行即
可。
当你需要向命令宏寄存器中增加内容时，可以用命令qA来向a寄存器增加内容，之后输入你想增加的内容，再使用q结束。
下面举几个例子:
一个文件100行,需要把1,2行合并,3,4行合并,依次类推.
合并行都知道是J.
用宏:
q
u
J
j
q            // 到这里宏录制完成
100@u        // 执行100次宏.多的会退出,没有关系

例二:
一个文件100行,删除奇数行.
用宏:
q
u
dd
j
q
50@u

*myhelp-vimtweak*
窗口透明：
:call libcallnr("vimtweak.dll", "SetAlpha", 200)
reset alpha
:call libcallnr("vimtweak.dll", "SetAlpha", 255)

Maximized Window:
Enable
:call libcallnr("vimtweak.dll", "EnableMaximize", 1)
Disable
:call libcallnr("vimtweak.dll", "EnableMaximize", 0)

TopMost Window:
Enable
:call libcallnr("vimtweak.dll", "EnableTopMost", 1)
Disable
:call libcallnr("vimtweak.dll", "EnableTopMost", 0)

*myhelp-buffer切换*
--------------------------------
map <Left> :bp<CR>
map <Right> :bn<CR>
map <F4>    :bd<CR>

就可以用左右方向健来切换buffer(一个编辑文件切换到下一个编辑文件)；
F4关闭buffer(关闭当前编辑文件)。

set hidden " 允许在有未保存的修改时切换缓冲区

注: 模式匹配中的回车换行 \r


*myhelp-文本加密*
                         
打开文件时加-x参数, 或者在打开文件后在Normal模式下输入命令":X", 文件可进入加密
模式. 此时vim会向你要一个密码用于加密/解密该文件(为了避免你的键入有误, Vim会要
求你再次输入):                                    
    Enter encryption key: ********                         
保存后退出, 如果你试着用另一程序来打开该文件, 或者你输入的密码错误的话, 你会看
到一堆乱码. Vim也没办法判断你给的密码是对是错(这也使得破解密码十分困难).                         

要停止对一个文件加密, 可以把用下面的命令把'key'选项设置为一个空字串. 保存后退
出, 下次你打开该文件时就不会进行加密了:
	:set key=
                         
注意:此命令要在解密后使用。否则会悲剧。 由于加密后文件的编码方式可能发生了改变, 因此所有和语言相关的tag功能都将不
可用. 解密该文件后才能使用taglist功能.


*myhelp-modifiable*
运行底行命令：
:set modifiable
如果要恢复，则：
:set nomodifiable
还有一个相关参数：
set ma
允许修改。
set noma
禁止修改。

*myhelp-map*
F1      help
F2      显示/隐藏工具栏
F3			nerdtree开关
F4			neocomplcache开关
F5			
F6			numbers插件开关
F7
F8
F9			打开链接
F10			浏览器打开正在编辑的html文件
F11			tagbar开关
F12			执行python

*myhelp-myplugin*
插件下载：
http://www.vim.org/scripts/script_search_results.php



*myhelp-ctags*
将ctags.exe放置到C:\windows\system32\(不是的话要加入path)

"开始" --> "运行" --> "cmd"
C:\Documents and Settings\Administrator>cd (进入源码所在目录)
D:\soft\linux-2.6.26\linux-2.6.26>ctags -R * (生成tags文件)






*myhelp-taglist*
From:http://mail.ustc.edu.cn/~tyli/vim/use_taglist_plugin.html
想必用过Source Insight的人都记得这样一个功能：SI能够把当前文件中的宏、全局变量、函数等tag显示在Symbol窗口，用鼠标点上述tag，就跳到该tag定义的位置；可以按字母序、该tag所属的类或scope，以及该tag在文件中出现的位置进行排序；如果切换到另外一个文件，Symbol窗口更新显示这个文件中的tag。 

在vim中的taglist插件所实现的就是上述类似的功能，有些功能比SI弱，有些功能比SI更强。而且，taglist插件还在不断完善中！ 

要使用taglist plugin，必须满足： 

打开vim的文件类型自动检测功能：filetype on
系统中装了Exuberant ctags工具，并且taglist plugin能够找到此工具（因为taglist需要调用它来生成tag文件） 
你的vim支持system()调用 
在文章vimrc初步中，我们使用了vim自带的示例vimrc，这个vimrc中已经打开了文件类型检测功能；在上篇文章中，我们也已用到了Exuberant ctags；system()调用在一般的vim版本都会支持(suse Linux发行版中出于安全考虑，关闭了此功能)，所以我们已经满足了这三个条件。 

现在我们到http://www.vim.org/scripts/script.php?script_id=273下载最新版本的taglist plugin，目前版本是4.3。 

下载后，把该文件在~/.vim/目录中解压缩，这会在你的~/.vim/plugin和~/.vim/doc目录中各放入一个文件： 

plugin/taglist.vim – taglist插件
doc/taglist.txt    - taglist帮助文件 
注：windows用户需要把这个插件解压在你的$vim/vimfiles或$HOME/vimfiles目录。 

使用下面的命令生成帮助标签（下面的操作在vim中进行）： 

:helptags ~/.vim/doc 
生成帮助标签后，你就可以用下面的命令查看taglist的帮助了： 

:help taglist.txt 
Taglist提供了相当多的功能，我的vimrc中这样配置： 

""""""""""""""""""""""""""""""
" Tag list (ctags)
""""""""""""""""""""""""""""""
if MySys() == "windows"                "设定windows系统中ctags程序的位置
let Tlist_Ctags_Cmd = 'ctags'
elseif MySys() == "linux"              "设定linux系统中ctags程序的位置
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口 
这样配置后，当你输入":TlistOpen"时，显示如下窗口： 


在屏幕右侧出现的就是taglist窗口，你从中可以看到在main.c文件中定义的所有tag：宏、定义、变量、函数等；你也可以双击某个tag，跳到该tag定义的位置；你还可以把某一类的tag折叠起来（使用了vim的折行功能），方便查看，就像上图中macro和variable那样。更多的功能，请查看taglist的帮助页，本文也会介绍一些常用功能。 

下面介绍常用的taglist配置选项，你可以根据自己的习惯进行配置： 

Tlist_Ctags_Cmd选项用于指定你的Exuberant ctags程序的位置，如果它没在你PATH变量所定义的路径中，需要使用此选项设置一下； 
如果你不想同时显示多个文件中的tag，设置Tlist_Show_One_File为1。缺省为显示多个文件中的tag； 
设置Tlist_Sort_Type为"name"可以使taglist以tag名字进行排序，缺省是按tag在文件中出现的顺序进行排序。按tag出现的范围（即所属的namespace或class）排序，已经加入taglist的TODO List，但尚未支持； 
如果你在想taglist窗口是最后一个窗口时退出vim，设置Tlist_Exit_OnlyWindow为1； 
如果你想taglist窗口出现在右侧，设置Tlist_Use_Right_Window为1。缺省显示在左侧。 
在gvim中，如果你想显示taglist菜单，设置Tlist_Show_Menu为1。你可以使用Tlist_Max_Submenu_Items和Tlist_Max_Tag_Length来控制菜单条目数和所显示tag名字的长度； 
缺省情况下，在双击一个tag时，才会跳到该tag定义的位置，如果你想单击tag就跳转，设置Tlist_Use_SingleClick为1； 
如果你想在启动vim后，自动打开taglist窗口，设置Tlist_Auto_Open为1； 
如果你希望在选择了tag后自动关闭taglist窗口，设置Tlist_Close_On_Select为1； 
当同时显示多个文件中的tag时，设置Tlist_File_Fold_Auto_Close为1，可使taglist只显示当前文件tag，其它文件的tag都被折叠起来。 
在使用:TlistToggle打开taglist窗口时，如果希望输入焦点在taglist窗口中，设置Tlist_GainFocus_On_ToggleOpen为1； 
如果希望taglist始终解析文件中的tag，不管taglist窗口有没有打开，设置Tlist_Process_File_Always为1； 
Tlist_WinHeight和Tlist_WinWidth可以设置taglist窗口的高度和宽度。Tlist_Use_Horiz_Window为1设置taglist窗口横向显示； 
在taglist窗口中，可以使用下面的快捷键： 

:tag XXXX, 查询XXX. 
:tags: 显示标签栈
Ctrl-]: 跳到光标所在标签的定义处.
Ctrl-o, Ctrl-t: 跳回原来的地方.
Ctrl-i: 向前跳.
:Tlist   打开taglist
回车键:跳到光标所在的标记的定义处(如将光标移到main函数,按回车键)
o:新建一个窗口,跳到标记定义处,在一个新打开的窗口中显示光标下tag
p:预览标记定义(仍然在taglist窗口)
空格:显示标记的原型(如函数原型)
u:更新标记列表(比如源文件新增了一个函数,并在保存后,可在taglist窗口按u)
s:选择排序字段 ,更改排序方式，在按名字排序和按出现顺序排序间切换
d:删除光标所在的taglist文件(如用vi打开了两个文件f1.c,f2.c可以删除f1.c的标记)
x:放大/缩小taglist窗口,方便查看较长的tag
+:展开(指标记),打开一个折叠，同zo
-:折叠,将tag折叠起来，同zc
*:全部展开,打开所有的折叠，同zR
=:全部折叠,将所有tag折叠起来，同zM
[[:将光标移到前一个文件的起点
]]:将光标移到后一个文件的起点
q:退出taglist窗口
F1:显示/关闭帮助
 
可以用":TlistOpen"打开taglist窗口，用":TlistClose"关闭taglist窗口。或者使用":TlistToggle"在打开和关闭间切换。在我的vimrc中定义了下面的映射，使用<F9>键就可以打开/关闭taglist窗口： 

map <silent> <F9> :TlistToogle<cr> 
Taglist插件还提供了很多命令，你甚至可以用这些命令创建一个taglist的会话，然后在下次进入vim时加载此会话。 


*myhelp-窗口*
winmanager帮助：
:WMToggle  打开
CTRL-W h    跳转到左边的窗口
CTRL-W j     跳转到下面的窗口
CTRL-W k    跳转到上面的窗口
CTRL-W l     跳转到右边的窗口
CTRL-W t    跳转到最顶上的窗口
CTRL-W b    跳转到最底下的窗口 

*myhelp-注释* 
  NERD_commenter
 [count],cc:光标以下count行逐行添加注释(7,cc)
 [count],cu:光标以下count行逐行取消注释(7,cu)
 [count],cm:光标以下count行尝试添加块注释(7,cm)
 注：count参数可选，无则默认为选中行或当前行


*myhelp-缓冲区*   
Buffers切换
\be 全屏方式查看全部打开的文件列表
\bv 左右方式查看  
\bs 上下方式查看
----------------------------------------------------------------



*myhelp-目录树*
NERD_tree 以树状方式浏览系统中的文件和目录
 :NERDTree 打开NERD_tree         :NERDTreeClose    关闭NERD_tree
 :Bookmark <name>添加标签
 B 切换是否显示书签
 o 打开关闭文件或者目录         t 在标签页中打开
		T 在后台标签页中打开           ! 执行此文件
 p 到上层目录                   P 到根目录
 K 到第一个节点                 J 到最后一个节点
 u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
 r 递归刷新当前目录             R 递归刷新当前根目录
 ================================================================================
	1.  |简介|
	2.  |功能|
		 2.1.  |全局命令|
		 2.2.  |书签|
			 2.2.1.	|书签表|
			 2.2.2.	|书签命令|
			 2.2.3.	|无效书签|
		 2.3.	|Nerdtree映射|
		 2.4.	|文件系统菜单|
	 3.	|选项|
		 
 
 
1.                                                                        
*myhelp-简介*
--------------------------------------------------------------------------------
 Nerd tree可以让你浏览文件系统并打开文件或目录。
 你可以通过键盘或鼠标控制它以树状图显示文件系统，也可以在其中进行一些简单的文件系统操作。
 
 nerdtree提供如下功能及特性：
 *以继承树的形式显示文件和目录
 *对如下类型的文件进行不同的高亮显示
 　*文件
 　*目录
 　*sym-links
 　*快捷方式
 　*只读文件
 　*可执行文件
 *提供许多映射来控制树状结构
 　*对展开/收拢/浏览目录结点的映射
 　*对在新的或已存在的窗口或Tab页中打开文件的映射
 　*对改变根结点的映射
 　*Mappings to navigate around the tree
 *可以将文件和目录添加到收藏夹
 *可以用鼠标进行大部分的树状结构导航
 *对树状结构内容的过滤（可在运行时切换）
 　*自定义文件过滤器可以阻止某些文件（比如vim备份文件等）的显示
 　*可选是否显示隐藏文件
 　*可选不显示文件只显示目录
 *提供文本文件系统菜单来创建/删除/移动/复制目录或文件
 *可以自定义Nerd窗口的位置和大小
 *可以自定义结点排序方式
 *当你浏览文件系统的时候就会有一个文件系统的模型被创建或维护。这样做有几个优点：
 　*所有文件系统信息都被缓存了，有需要的时候只要重新读入缓存
 　*如果重新浏览之后访问过的tree的一部分，结点就会以上次保持的展开或合拢的样子显示
 *该脚本能记住光标位置和窗口位置，所以可以用NERDTreeToggle来切换tree的显示与隐藏
 *对于多Tab，可以共享一个Tree，也可以各自拥有各自的tree，还可以混合以上两种方式
 *默认情况下，该脚本覆盖vim的默认文件浏览器(netrw)，所以如果直接输入:edit命令也会用nerd树打开
 
 
 
2.
*功能*
	--------------------------------------------------------------------------------
	2.1.
    *全局命令*
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	 :NERDTree [<start-directory> | <bookmark>]
	 打开一个Nerdtree，根结点由参数指定，不指定参数就是以当前目录为根结点
	 :NERDTreeFromBookmark <bookmark>
	 打开一个Nerdtree，根结点由参数所指定的书签
	 :NERDTreeToggle [<start-directory> | <bookmark>]
	 在当前Tab中如果Nerdtree已经存在，就切换显示与隐藏；
	 如果不存在，就相当于执行:NERDTree命令
	 :NERDTreeMirror
	 从另一个Tab中共享一个NerdTree过来（在当前Tab的Tree所作的改变也反应到原Tab中）
	 如果总共只有一个Tree，就直接共享；如果不止一个，就会询问共享哪个
	 :NERDTreeClose
	 在当前Tab中关闭Tree
	2.2.
	*书签*
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	在NerdTree中，书签用于标记某个感兴趣的文件或目录，比如可以用书签标记所有Project目录
 
		 2.2.1.
		*书签表*
		 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 如果书签被激活，则显示于树状图的上方
		 可以双击或用NERDTree-o来激活选中文件
		 可以用NERDTree-t映射使选中文件用新Tab打开，并跳到新tab页
		 可以用NERDTree-T映射使选中文件用新Tab打开，但不跳到新Tab页
 
		 2.2.2.
		*书签命令*
		 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 以下命令只在在Nerdtree的buffer中有效
		 :Bookmark <name>
		 将选中结点添加到书签列表中，并命名为name（书签名不可包含空格）；
		 如与现有书签重名，则覆盖现有书签。
		 :BookmarkToRoot <bookmark>
		 以指定目录书签或文件书签的父目录作为根结点显示NerdTree
		 :RevealBookmark <bookmark>
		 如果指定书签已经存在于当前目录树下，打开它的上层结点并选中该书签 
		 :OpenBookmark <bookmark>
		 打开指定的文件。（参数必须是文件书签）
		 如果该文件在当前的目录树下，则打开它的上层结点并选中该书签
		 :ClearBookmarks [<bookmarks>]
		 清除指定书签；如未指定参数，则清除所有书签
		 :ClearAllBookmarks
		 清除所有书签
		 :ReadBookmarks          
		重新读入'NERDTreeBookmarksFile'中的所有书签
  
		2.2.3.
		*无效书签*
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		如果监测到无效书签，脚本就会发布一个错误消息并将无效书签置为不可用；
		无效书签将被移到书签文件的最后，在有效书签和无效书签之间有一个空行。
		书签文件中的每一行代表一个书签，格式是<bookmark name><space><full path to the bookmark location>
		如果修正了某个无效书签，则可以重启vim或使用:ReadBookmarks命令重新读入书签信息
  
	2.3.
	*Nerdtree映射*
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    o.......在已有窗口中打开文件、目录或书签，并跳到该窗口   .....|NERDTree-o|  
    go......在已有窗口中打开文件、目录或书签，但不跳到该窗口 .....|NERDTree-go| 
    t.......在新Tab中打开选中文件/书签，并跳到新Tab          .....|NERDTree-t|  
    T.......在新Tab中打开选中文件/书签，但不跳到新Tab        .....|NERDTree-T|  
    i.......split一个新窗口打开选中文件，并跳到该窗口        .....|NERDTree-i|  
    gi......split一个新窗口打开选中文件，但不跳到该窗口      .....|NERDTree-gi| 
    s.......vsp一个新窗口打开选中文件，并跳到该窗口          .....|NERDTree-s|  
    gs......vsp一个新窗口打开选中文件，但不跳到该窗口        .....|NERDTree-gs| 
    !.......执行当前文件                                     .....|NERDTree-!|  
    O.......递归打开选中结点下的所有目录                     .....|NERDTree-O|  
    x.......合拢选中结点的父目录                             .....|NERDTree-x|  
    X.......递归合拢选中结点下的所有目录                     .....|NERDTree-X|  
    e.......Edit the current dif                             .....|NERDTree-e|  
  
    双击......相当于NERDTree-o
    中键......对文件相当于NERDTree-i，对目录相当于NERDTree-e
  
    D.......删除当前书签
            
    P.......跳到根结点
    p.......跳到父结点
    K.......跳到当前目录下同级的第一个结点
    J.......跳到当前目录下同级的最后一个结点
    <C-j>...跳到当前目录下同级的前一个结点
    <C-k>...跳到当前目录下同级的后一个结点
            
    C.......将选中目录或选中文件的父目录设为根结点
    u.......将当前根结点的父目录设为根目录，并变成合拢原根结点
    U.......将当前根结点的父目录设为根目录，但保持展开原根结点
    r.......递归刷新选中目录
    R.......递归刷新根结点
    m.......显示文件系统菜单
    cd......将CWD设为选中目录
            
    I.......切换是否显示隐藏文件
    f.......切换是否使用文件过滤器
    F.......切换是否显示文件
    B.......切换是否显示书签
            
    q.......关闭NerdTree窗口
    ?.......切换是否显示Quick Help
           
    
  
	2.4.
	*文件系统菜单*
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	帮助说中包含新建、复制、移动、删除四种命令，但copy只支持*nix系统
  
3.
*自定义选项*
  --------------------------------------------------------------------------------
  loaded_nerd_tree            不使用NerdTree脚本
  NERDChristmasTree           让Tree把自己给装饰得多姿多彩漂亮点
  NERDTreeAutoCenter          控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心
  NERDTreeAutoCenterThreshold 与NERDTreeAutoCenter配合使用
  NERDTreeCaseSensitiveSort   排序时是否大小写敏感
  NERDTreeChDirMode           确定是否改变Vim的CWD
  NERDTreeHighlightCursorline 是否高亮显示光标所在行
  NERDTreeHijackNetrw         是否使用:edit命令时打开第二NerdTree
  NERDTreeIgnore              默认的“无视”文件
  NERDTreeBookmarksFile       指定书签文件
  NERDTreeMouseMode           指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）
  NERDTreeQuitOnOpen          打开文件后是否关闭NerdTree窗口
  NERDTreeShowBookmarks       是否默认显示书签列表
  NERDTreeShowFiles           是否默认显示文件
  NERDTreeShowHidden          是否默认显示隐藏文件
  NERDTreeShowLineNumbers     是否默认显示行号
  NERDTreeSortOrder           排序规则
  NERDTreeStatusline          窗口状态栏
  NERDTreeWinPos              窗口位置（'left' or 'right'）
  NERDTreeWinSize             窗口
-----------------------------------------------------------------------


*myhelp-编码*
点击http://www.vim.org/scripts/script.php?script_id=1708下 载。

使用方法:
  1  把fencview.vim 放到 plugin 目录下。
  2  两条命令:    :FencView   :FencAutoDetect  分别是打开编码类型窗口和
       自动进行编码识别.
  3  主要的功能同时也集成在菜单里面, tools->encoding 
  4  把下面这一行加入vimrc可以在打开文件的时候自动进行编码识别
        autocmd BufReadPost * FencAutoDetect

说明：
  1  最好使用utf-8的encoding设置来提高识别准确率，已知在windows下encoding为cp936会导致含有bom的ucs-2文件识别错误。
  2  为了提高速度，它只检查文件的头尾各10行。
  3  在windows下面，需要在PATH里面放一个iconv.dll
     http://mbbill.googlepages.com/iconv.dll
  4  文件的modeline里面如果有fenc的设置将会使脚本失效.

 



*myhelp-阅读*
http://guoyoooping.blog.163.com/blog/static/1357051832009112910162389/ 
一、TxtBrowser功能展示
　　以下是功能简介，更多请参见作者介绍，以及官方下载包中的 txtbrowser.cnx 文件。

1. 目录树侧边栏
　　用Vim打开纯文本类型的文件（.txt 或 :se ft=txt），键入一条命令（:Tlist）或按下对应热键（可自定义，示例如下），会生成目录树侧边栏（即taglist窗口）。
    在目录栏点击相应标签，正文会相应跳转。
　　目录栏的内容既包括正文目录，也包括图片目录、表格目录，并可进一步自定义。
　　更新正文后，键入命令（:TlistUpdate）或按下对应热键（可自定义，示例如下），即可刷新目录栏。

:nmap <silent> <F8> <ESC>:Tlist<RETURN>
:noremap <silent> <F5> <ESC>:TlistUpdate<RETURN>

2. 语法高亮
　　纯文本也可以“多姿多彩”！TxtBrowser可以使关键文字高亮显示，突出显示标题、关键字、列举项。可以提高效率，愉悦心情。通过 :colorscheme colorname 命令，可以尝试不同的着色方案。

3. 其他扩展功能
　　* 把光标放到 URL上，执行 :TGoto （或 \g）打开所在处的URL，包括网址、各种文件（包括pdf、mp3等）、Email地址。
　　* 把光标放到单词上，执行 :TFind （或 \f）打开网络字典查单词。
　　* 把光标放到单词上，执行 :TSearch （或 \s）打开google搜索。


二、安装及使用笔记

　　说明：编程人员对tag、ctags、taglist都很熟悉。但对于象我这样不编程的用户来说，因为TxtBrowser而第一次安装、使用这些东西，还是比较复杂的。记录如下，并提供对初学者友好地解释。

1. 安装ctags  
   
2. 安装taglist 

3. 安装TxtBrowser
http://www.vim.org/scripts/script.php?script_id=2899
　　除了大部分内容复制到vimfiles目录，一定要注意 .ctags 文件要复制到 “$Home”目录。$home可以简单地理解为 c:\Documents and Settings\用户ID\。以我为例，新增如下内容
d:\soft\Vim\vimfiles\plugin\txtbrowser.vim （生成目录、扩展功能所用的插件）
d:\soft\Vim\vimfiles\doc\txtbrowser.cnx （帮助文档）
d:\soft\Vim\vimfiles\doc\txtbrowser.txt （帮助文档）
d:\soft\Vim\vimfiles\syntax\txt.vim （语法高亮文件）
c:\Documents and Settings\zyx\.ctags （重要：定义文件文件中，哪些文本生成tag）

4. 在.vimrc文件里加入：

syntax on
filetype plugin on 
au BufEnter *.txt setlocal ft=txt

5. 重启vim，打开 http://www.rfc-editor.org/rfc/rfc959.txt ，执行命令 :Tlist，应该能看到效果了。

 --------------------------------------------------------------------------------------------

*myhelp-日历*
http://sociallearnlab.org/group/%E5%AD%A6%E6%97%A0%E6%AD%A2%E5%A2%83@%E4%B8%80%E7%82%B9%E4%B8%80%E6%BB%B4/2010/02/26/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8VIM%E8%AE%B0%E6%99%A8%E9%97%B4%E6%97%A5%E8%AE%B0
1.准备好Calendar插件

从（ [www.vim.org] ）下载插件，并把它解压到VIM安装目录中的plugin文件夹里。

我放插件的文件夹是：

f:\Vim\vimfiles\plugin\

只要，Calendar放到plugin文件夹里面，Calendar插件就安装成功。

感谢网友xinghang、lzuxz的提醒，把Calendar文件放好之后，要在VIM的配置文件，也就是_vimrc这个文件里面，为了Calendar能配置成功，要在_vimrc添加如下命令：

let calendar_diary = path

红色字体的部分，是填上放置Calendar记录文件的路径，我的配置如下：

let calendar_diary = D:\Program Files\Vim\vimfiles\templates\calendar
2.准备好模板文件

这个步骤很简单，新建一个文件夹，并在里面新建一个文件，这个文件就是你需要的模板文件。

这个文件什么格式都可以，但是一定要带后缀，比如：.tpl。

我的模板文件叫作calendar_morning_diary.tpl，放在：

f:\Vim\templates\calendar_morning_diary.tpl

3.修改_vimrc

打开_vimrc，输入以下参数：

autocmd BufNewFile *.cal read D:\Program Files\Vim\vimfiles\templates\calendar\calendar_diary.tpl | normal ggdd

这段命令，是让你在用Calendar记录的时候，能够自动地载入模板。

4.运行VIM，调出Calendar

在命令模式下，输入:Calendar，如图：
  Figure 1
+----------------------+-----------------------------------+
|   <← 今天(t) →>    |This is Calendar                   |
|                      |                                   |
|    2011/4(四月)      |                                   |
|日 一 二 三 四 五 六  |                                   |
|                1  2  |                                   |
| 3  4  5  6  7  8  9  |                                   |
|10 11 12 13 14 15 16  |                                   |
|17 18 19 20 21 22 23  |                                   |
|24 25 26 27 28 29 30  |                                   |
|                      |                                   |
|    2011/5(五月)      |                                   |
|日 一 二 三 四 五 六  |                                   |
| 1  2  3  4  5  6  7  |                                   |
| 8  9 10 11 12 13 14  |                                   |
|15 16 17 18 19 20*21  |                                   |
|22 23 24 25 26 27 28  |                                   |
|29 30 31              |                                   |
|                      |                                   |
|    2011/6(六月)      |                                   |
|日 一 二 三 四 五 六  |                                   |
|          1  2  3  4  |                                   |
| 5  6  7  8  9 10 11  |                                   |
|12 13 14 15 16 17 18  |                                   |
|19 20 21 22 23 24 25  |                                   |
|26 27 28 29 30        |                                   |
+----------------------+-----------------------------------+
               

*myhelp-画图*                                                 
-------------------------------------------------------
DrawIt：Vim画图插件（可在vim中画基本示意图）
http://hi.baidu.com/2maollm/blog/item/ff98de179aa61505c93d6da7.html
1）启动和退出DrawIt。
在vim的普通模式下按下。
\di    启动
\ds    关闭
2）画图
在vim的visual block（可视块）模式下，进入可视块模式的方法是Ctrl-v组合键。选择一个矩形框，然后
\b    矩形框
\e    椭圆
3）箭头
不要进入可视模式！
^    上箭头
\^    粗大上箭头
v    下箭头
\v    粗大下箭头
>    右箭头
\>    粗大右箭头
<    左箭头
\<    粗大左箭头
4）斜线
PgUp    右上斜线
PgDn    右下斜线
End     左下斜线
Home    左上斜线

------------------------------------------------------- 


*myhelp-鼠标画图*
-------------------------------------------------------
sketch.vim画图 
执行:call ToggleSketch()命令开启或关闭画图功能. 
 
鼠标左键用于画自由曲线, Ctrl-鼠标左键可以画粗曲线. 鼠标右键圈一个区域, 然后点击
左键可以画空心图, Shift-鼠标左键画的的时候拐弯处用.而不是+, Ctrl-鼠标左键可
以画实习图. Alt-鼠标左键可以切换实心画和粗笔画的线条, 可以有的选择为., :和
#.


*myhelp-打开历史文件*
:MRU
vim:tw=78:noet:ts=2:ft=help:

